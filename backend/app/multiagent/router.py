from fastapi import APIRouter, WebSocket, WebSocketDisconnect
from .graph import graph
from .state import MultiAgentState
import json
import logging

logger = logging.getLogger(__name__)
router = APIRouter()

@router.post("/multiagent/answer")
async def multiagent_answer(user_id: str, prompt: str):
    state = MultiAgentState(user_id=user_id, prompt=prompt)
    result = await graph.ainvoke(state)
    return result

@router.websocket("/ws/multiagent")
async def multiagent_websocket(websocket: WebSocket):
    await websocket.accept()
    try:
        data = await websocket.receive_text()
        data = json.loads(data)
        user_id = data.get("user_id")
        prompt = data.get("prompt")
        if not user_id or not prompt:
            await websocket.send_json({
                "type": "error",
                "message": "user_id and prompt are required"
            })
            await websocket.close()
            return
        logger.info(f"MultiAgent WebSocket connection for user_id={user_id} with prompt={prompt}")
        await websocket.send_json({"type": "thinking"})
        state = MultiAgentState(user_id=user_id, prompt=prompt)
        result = await graph.ainvoke(state)
        logger.info(f"MultiAgent result: {result}")
        clarifications = result.get("clarifications") if isinstance(result, dict) else getattr(result, "clarifications", None)
        rationale = result.get("rationale") if isinstance(result, dict) else getattr(result, "rationale", None)
        answer = result.get("answer") if isinstance(result, dict) else getattr(result, "answer", None)
        answer_html = result.get("answer_html") if isinstance(result, dict) else getattr(result, "answer_html", None)
        citations = result.get("citations") if isinstance(result, dict) else getattr(result, "citations", None)
        history = result.get("history") if isinstance(result, dict) else getattr(result, "history", None)
        sent = False
        if clarifications:
            await websocket.send_json({"type": "clarification", "clarifications": clarifications})
            sent = True
        if rationale:
            await websocket.send_json({"type": "rationale", "rationale": rationale})
            sent = True
        if answer:
            await websocket.send_json({"type": "answer", "answer": answer})
            sent = True
        if answer_html:
            await websocket.send_json({"type": "answer_annotated_html", "answer_html": answer_html})
            sent = True
        if citations:
            await websocket.send_json({"type": "citations", "citations": citations})
            sent = True
        if history:
            await websocket.send_json({"type": "history", "history": history})
            sent = True
        if not sent:
            await websocket.send_json({
                "type": "error",
                "message": "No result was generated by the agent."
            })
        # Signal completion to the frontend
        await websocket.send_json({"type": "done"})
        await websocket.close()
    except WebSocketDisconnect:
        logger.info("MultiAgent WebSocket client disconnected")
    except json.JSONDecodeError:
        await websocket.send_json({
            "type": "error",
            "message": "Invalid JSON format"
        })
        await websocket.close()
    except Exception as e:
        logger.error(f"Error in MultiAgent WebSocket endpoint: {str(e)}")
        await websocket.send_json({
            "type": "error",
            "message": "Internal server error"
        })
        await websocket.close() 